# -*- coding: utf-8 -*-
"""COMS 488 HMW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vjUFe-E2AWFUJktd2g4M_hk_CcLJC5ay
"""

import argparse
import os
import sys, getopt
import subprocess
import statistics
import json


# import sys
# sys.argv=['']
# del sys

def parseArgument(argv):
    parser = argparse.ArgumentParser()
    help_sentence = """
                    -h, --help show this help message and exit
                    -n NUM_RUNS Number of times traceroute will run
                    -d RUN_DELAY Number of seconds to wait between two consecutive runs
                    -m MAX_HOPS Max number of hopes that traceroute will probe
                    -o OUTPUT Path and name (without extension) of the .json output file
                    -t TARGET A target domain name or IP address
                    --test TEST_DIR   Directory containing num_runs text files, each of which
                                      contains the output of a traceroute run. If present, this
                                      will override all other options and traceroute will not be
                                      invoked. Statistics will be computed over the traceroute output
                                      stored in the text files only.
          """

    if(len(argv) % 2 != 0) and argv[0] == "-h":
      print(help_sentence)
      sys.exit(2)

    try:
        opts, args = getopt.getopt(argv,"hn:t:d:m:o:",["NUM_RUNS=","TARGET=", "RUN_DELAY=", "MAX_HOPS=", "OUTPUT=", "TEST_DIR="])
    except getopt.GetoptError:
        print ('test.py -n <NUM_RUNS> -t <TARGET>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
          print(help_sentence)
          sys.exit()
        elif opt in ("-n", "--NUM_RUNS"):
          if arg.isdigit():
            parser.add_argument("-n", help='Number of your input will be shown',  dest = 'NUMBER' , type=int, default= int(arg))
          else:
            parser.add_argument("-n", help='Number of your input will be shown',  dest = 'NUMBER' , type=int, default=10)
          print(opt + " " + arg)
        elif opt in ("-d", "--RUN_DELAY"):
          if arg.isdigit():
            parser.add_argument("-d", help='Number of seconds to wait between two consecutive runs',  dest = 'RUN_DELAY' , type=int, default= int(arg))
          else:
            parser.add_argument("-d", help='Number of seconds to wait between two consecutive runs',  dest = 'RUN_DELAY' , type=int, default=10)
          print(opt + " " + arg)
        elif opt in ("-m", "--MAX_HOPS"):
          if arg.isdigit():
            parser.add_argument("-m", help='Max number of hopes that traceroute will probe',  dest = 'MAX_HOPS' , type=int, default= int(arg))
          else:
            parser.add_argument("-m", help='Max number of hopes that traceroute will probe',  dest = 'MAX_HOPS' , type=int, default=10)
          print(opt + " " + arg)
        elif opt in ("-t", "--TARGET"):
          if arg != "":
           parser.add_argument("-t", help='Target Website',dest = 'WEB_ADDRESS' , type=str,default=arg)
          else:
            parser.add_argument("-t", help='Target Website',dest = 'WEB_ADDRESS' , type=str,default='www.google.com')
          print(opt + " " + arg)
        elif opt in ("-o", "--OUTPUT"):
          if arg != "":
           parser.add_argument("-o", help='Path and name (without extension) of the .json output file',dest = 'OUTPUT' , type=str,default=arg)
          else:
            parser.add_argument("-o", help='Path and name (without extension) of the .json output file',dest = 'OUTPUT' , type=str,default='output')
          print(opt + " " + arg)
        elif opt in ("--test"):
          text = """
            Directory containing num_runs text files, each of which
            contains the output of a traceroute run. If present, this
            will override all other options and traceroute will not be
            invoked. Statistics will be computed over the traceroute output
            stored in the text files only."""
          if arg != "":
           parser.add_argument("--test", help= text, dest = 'TEST_DIR' , type=str,default=arg)
          else:
            parser.add_argument("--test", help=text,dest = 'TEST_DIR' , type=str,default='TEST_DIR')
          print(opt + " " + arg)

    args = parser.parse_args()
    return args


def function_contain_Arguments(number, web_address):
    print('The number of your input is '+str(number))
    print('Your target website is '+ web_address)


def save_result_in_txt(args):
    filename = '01.txt'
    print('Running ...\n')
    file_output = open(filename,"w")
    # create a process
    # run traceroute -m max_hops target(the content in the square brackets is actually irrelevant with the
    # py program itself, it is the command for running traceroute!  )
    # An abstract understanding: you can think there is an agent helping you run traceroute and save it into txt
    #subprocess.Popen(["traceroute", "-m",  str(args.NUMBER), args.WEB_ADDRESS], stdout = file_output).wait()

    server_ip = "192.168.1.1"
    # hop_stats = {}
    stats = ""
    print("[")
    for count in range(1, 3):
      traceroute_output = subprocess.check_output(["traceroute", "-n", "-w", "1", server_ip])
      # print("old")
      # print(traceroute_output)
      traceroute_output = traceroute_output.decode('utf-8').split('\n')[1:-1]
      # print("new")
      # print(traceroute_output)

      for hop in traceroute_output:
          # print("HOP")
          # print(hop)
          hop_num, hop_ip, *hop_latencies = hop.split()
          
          new_hop_latencies = []
          # print((hop_latencies))

          for l in hop_latencies:
              if l != "ms" and l != "*":
                  latency = float(l)
                  # print(latency)
                  new_hop_latencies.append(latency)



          hop_latencies = new_hop_latencies
          if len(hop_latencies) > 0:
              
              hop_stats = {
                  "avg": round(statistics.mean(hop_latencies), 3),
                  "hop": count,
                  "hosts": server_ip,
                  "max": max(hop_latencies),
                  "med": statistics.median(hop_latencies),
                  "min": min(hop_latencies)
              }

              print(json.dumps(hop_stats, indent=4))
              print(",")
              # stats += str( hop_stats[count])

    #   print(stats)
    # print(json.dumps(stats, indent=4))
    print("]\n")
    file_output.close()
    print("Done!")

if __name__ == '__main__' :
    args=parseArgument(sys.argv[1:])
    #function_contain_Arguments(args.NUMBER, args.WEB_ADDRESS)
    save_result_in_txt(args)